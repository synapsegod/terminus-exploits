local RunService = game:GetService("RunService")
local PlayerService = game:GetService("Players")
local Me = PlayerService.LocalPlayer

local Ores = {
	"Iron",
	"Nickel",
	"Bronze",
	"Aluminium",
	"Copper",
	"Silver",
	"Titanium",
	"Ruby",
	"Gold",
	"Quartz",
	"Cobalt",
	"Lithium",
	"Iridum",
	"Diamond",
	"Sapphire",
	"Jade",
	"Mercury",
	"Emerald",
	"Uranium",
	"Plutonium",
	"Twitchium"
}

local Whitelist = {}

local Settings = {
	MaxRockDistance = 250,
	OreCapacity = 22,
	CrateCapacity = 2,
}

local IsRunning = false

local Terminus = RunService:IsStudio() and require(game.ReplicatedFirst.Terminus) or (shared.Terminus or loadstring(game:HttpGet("https://raw.githubusercontent.com/synapsegod/terminus/main/main.lua"))())
local Terminal = Terminus:new("MiningInc", {
	ScrollContent = true
})

for k, v in pairs (Terminal:ImportSettings()) do
	Settings[k] = v
end

function touch(part, toucher)
	firetouchinterest(part, toucher, 0)

	RunService.RenderStepped:Wait()

	firetouchinterest(part, toucher, 1)
end

local function tag(item)
	if item:FindFirstChild("BillboardGui") then return end

	local gui = Instance.new("BillboardGui", item)
	gui.AlwaysOnTop = true
	gui.Size = UDim2.new(0, 5, 0, 5)

	local frame = Instance.new("Frame", gui)
	frame.BorderSizePixel = 0
	frame.BackgroundColor3 = item.BrickColor.Color
	frame.Size = UDim2.new(1, 0, 1, 0)
end

local function getVehicle()
	local seat = Me.Character.Humanoid.SeatPart
	if seat then return seat.Parent end
end

local function collectCrates()
	local space = Settings.CrateCapacity
	local vehicle = getVehicle()
	local toucher = vehicle.Welds.ForkTouch

	for _, crate in pairs (workspace.Crates:GetChildren()) do
		if (crate.Position - toucher.Position).magnitude <= Settings.MaxRockDistance then
			touch(crate, toucher)

			space = space - 1
			if space == 0 then break end
		end
	end
end

function collectOres()
	local space = Settings.OreCapacity
	local vehicle = getVehicle()
	local toucher = vehicle.Locker

	for _, ore in pairs (workspace.Minerals:GetChildren()) do
		if (ore.Position - Vector3.new(92, 12055, -50)).Magnitude > 200 then
			if ore:FindFirstChild("Type") and table.find(Whitelist, ore.Type.Value) then
				touch(ore, toucher)

				space = space - 1
				if space == 0 then break end
			end
		end
	end
end

function mineOres()
	local vehicle = getVehicle()
	local drill = vehicle.Drill.DrillTouch

	for _, chunk in pairs (workspace.Rocks:GetChildren()) do
		if (drill.Position - chunk.CenterValue.Value).Magnitude < Settings.MaxRockDistance then
			for _, rock in pairs (chunk:GetChildren()) do
				if rock.Name ~= "Rock" then continue end
				
				if not rock:FindFirstChild("Type") or table.find(Whitelist, rock.Type.Value) then
					spawn(function()
						touch(rock, drill)
					end)
				end
			end
		end
	end
end

function main()
	if not getVehicle() then return end
	
	if Me.Team.Name == "Miners" then
		for i = 1, 10 do
			RunService.Stepped:Wait()
			
			spawn(function()
				while Me.Character.Humanoid.SeatPart do
					mineOres()
					RunService.Stepped:Wait()
				end
			end)
		end
	elseif Me.Team.Name == "Haulers" then
		collectOres()
	elseif Me.Team.Name == "Dispatchers" then
		collectCrates()
	end
end

Terminal:CreateTextLabel(nil, {
	Text = "MiningInc"
})

Terminal:CreateLine(nil)

Terminal:CreateDropdown(nil, {
	Items = Ores,
	Selected = Whitelist,
	Padding = 2,
	MaxDisplay = 300,
	CloseOnSelect = false,
	MultiSelect = true,
	Title = "Ore Whitelist",
	OnSelected = function(self, item)
		Terminal:ExportSettings(Settings)
	end,
})

local HeightLabel = Terminal:CreateTextLabel(nil, {
	Text = "Max Rock Distance " .. tostring(Settings.MaxRockDistance) 
})

Terminal:CreateSlider(nil, {
	Minimum = 10,
	Maximum = 500,
	Value = Settings.MaxRockDistance,
	Size = UDim2.new(1, -20, 0, 20),

	OnChanged = function(self, value)
		Settings.MaxRockDistance = value
		HeightLabel.Text = "Max Rock Distance " .. tostring(Settings.MaxRockDistance) 
		
		Terminal:ExportSettings(Settings)
	end,
})

Terminal:CreateRow(nil, {
	Layout = {0.5, 0.5},
	Size = UDim2.new(1, 0, 0, 20),
	Items = {
		Terminal:CreateTextLabel(nil, {
			Text = "Max Ore Capacity"
		}),
		Terminal:CreateTextField(nil, {
			Text = tostring(Settings.OreCapacity),
			NumbersOnly = true,
			AnchorPoint = Vector2.new(0.5, 0.5),
			Position = UDim2.new(0.5, 0, 0.5, 0),
			OnChanged = function(self, value)
				if not value then return end
				Settings.OreCapacity = tonumber(value)
				
				Terminal:ExportSettings(Settings)
			end,
		})
	}
})

Terminal:CreateRow(nil, {
	Layout = {0.5, 0.5},
	Size = UDim2.new(1, 0, 0, 20),
	Items = {
		Terminal:CreateTextLabel(nil, {
			Text = "Max Crate Capacity"
		}),
		Terminal:CreateTextField(nil, {
			Text = tostring(Settings.CrateCapacity),
			NumbersOnly = true,
			AnchorPoint = Vector2.new(0.5, 0.5),
			Position = UDim2.new(0.5, 0, 0.5, 0),
			OnChanged = function(self, value)
				if not value then return end
				Settings.CrateCapacity = tonumber(value)
				
				Terminal:ExportSettings(Settings)
			end,
		})
	}
})

Terminal:CreateTextButton(nil, {
	AnchorPoint = Vector2.new(0.5, 0.5),
	Position = UDim2.new(0.5, 0, 0.5, 0),
	Size = UDim2.new(1, 0, 0, 24),

	Text = "Run Operation",
	Selectable = false,
	OnActivated = function(self, state)
		main()
		print("Finished Operation")
	end,
})

Terminal:CreateTextButton(nil, {
	AnchorPoint = Vector2.new(0.5, 0.5),
	Position = UDim2.new(0.5, 0, 0.5, 0),
	Size = UDim2.new(1, 0, 0, 24),

	Text = "Clear Tags",
	Selectable = false,
	OnActivated = function(self, state)
		for _, ore in pairs (workspace.Minerals:GetChildren()) do
			local tagged = ore:FindFirstChildOfClass("BillboardGui")
			if tagged then tagged:Destroy() end
		end
		
		for _, chunk in pairs (workspace.Rocks:GetChildren()) do
			for _, rock in pairs (chunk:GetChildren()) do
				if rock.Name == "Rock" then
					if rock:FindFirstChild("Type") then
						local tagged = rock:FindFirstChildOfClass("BillboardGui")
						if tagged then tagged:Destroy() end
					end
				end
			end
		end
	end,
})

spawn(function()
	while wait(1) do
		for _, ore in pairs (workspace.Minerals:GetChildren()) do
			if table.find(Whitelist, ore.Type.Value) then
				tag(ore)
			end
		end
		
		for _, chunk in pairs (workspace.Rocks:GetChildren()) do
			for _, rock in pairs (chunk:GetChildren()) do
				if rock.Name == "Rock" then
					if rock:FindFirstChild("Type") and table.find(Whitelist, rock.Type.Value) then
						tag(rock)
					end
				end
			end
		end
	end
end)
