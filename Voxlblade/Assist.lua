local RunService = game:GetService("RunService")
local PlayerService = game:GetService("Players")
local Me = PlayerService.LocalPlayer
local Camera = workspace.CurrentCamera

local Enchantments = {"Legendary", "Magical", "Corrupt", "Bloody"}

local Terminus = RunService:IsStudio() and require(game.ReplicatedFirst.Terminus) or (shared.Terminus or loadstring(game:HttpGet("https://raw.githubusercontent.com/synapsegod/terminus/main/main.lua"))())
Terminus.Debug = true

local MyStyle = Terminus:CreateStyle({
	ActiveColor = Color3.fromRGB(0, 170, 255)
})
local SwitchStyle = MyStyle:Clone({
	BackgroundColor = Color3.fromRGB(50, 50, 50)
})

local Terminal = Terminus:new("VoxlAssist", {
	Style = MyStyle,
	ScrollContent = true
})

local Settings = {
	Whitelist = {},
	Enchantments = table.clone(Enchantments),
	TrackMobs = true,
	DisableKnockback = false,
}

for k, v in pairs (Terminal:ImportSettings()) do
	Settings[k] = v
end

local IsTraveling = false
local TravelDestination = nil
local Connections = {}
local Tags = {}

local function GetAllEnemies()
	if RunService:IsStudio() then
		return {"Monster1", "Monster2", "Monster3", "Monster4", "Monster5"}
	end

	local interactables = workspace:WaitForChild("Interactables")
	local enemies = {}

	for _, npc in pairs (game.ReplicatedStorage:WaitForChild("NPCs"):GetChildren()) do
		if interactables:FindFirstChild(npc.Name) then continue end

		table.insert(enemies, npc.Name)
	end

	return enemies
end

local function GetAllTravelDestinations()
	if RunService:IsStudio() then
		return {
			{Position = Vector3.new(0, 5, 50), Name = "Position1"},
			{Position = Vector3.new(0, 5, 0), Name = "Position2"},
			{Position = Vector3.new(50, 5, 0), Name = "Position3"}
		}
	end
	
	local destinations = {}
	for _, shrine in pairs (workspace:WaitForChild("Shrines"):GetChildren()) do
		table.insert(destinations, {Position = shrine.PrimaryPart.Position + Vector3.new(0, 10, 0), Name = shrine.Name})
	end

	for _, infuser in pairs (workspace:WaitForChild("Infusers"):GetChildren()) do
		table.insert(destinations, {Position = infuser.Enabled.Position + Vector3.new(0, 10, 0), Name = infuser.Name .. " infuser "})
	end

	for _, dungeon in pairs (workspace:WaitForChild("Others"):GetChildren()) do
		if not dungeon:IsA("BasePart") then continue end
		table.insert(destinations, {Position = dungeon.Position, Name = dungeon.Name})
	end

	for _, original in pairs (game.ReplicatedStorage:WaitForChild("NPCs"):GetChildren()) do
		local npc = workspace.Interactables:FindFirstChild(original.Name)
		if not npc then continue end

		local nametag = original:FindFirstChild("TextLabel", true)
		if not nametag then continue end
		if not string.find(nametag.Text, "Innkeeper") then continue end

		table.insert(destinations, {Position = npc.Position, Name = nametag.Text})
	end
	
	for _, hand in pairs (workspace.Interactables:GetChildren()) do
		if hand.Name == "BH1" or hand.Name == "BH2" or hand.Name == "BH3" then
			table.insert(destinations, {Position = hand:WaitForChild("Blood Hand").Position + Vector3.new(0, 5, 0), Name = "Blood Hand" .. string.sub(hand.Name, 3)})
		end
	end

	local snail = workspace:WaitForChild("Map"):WaitForChild("Stand")
	table.insert(destinations, {Position = snail.PrimaryPart.Position + Vector3.new(0, 5, 0), Name = "Snail Trader"})
	
	table.insert(destinations, {Position = Vector3.new(2010, 314.5, 3019.23), Name = "Desert Inn"})

	return destinations
end

local function GetSpecial(npc)
	for _, name in pairs (Settings.Enchantments) do
		local effect = npc:FindFirstChild(name)
		if effect and effect.Enabled then
			return effect
		end
	end

	return nil
end

local function IsWhitelisted(npc)
	for _, name in pairs (Settings.Whitelist) do
		if string.find(string.lower(npc.Name), string.lower(name)) then
			return true
		end
	end

	return false
end

local function TagMob(npc)
	local whitelisted = IsWhitelisted(npc)
	local special = GetSpecial(npc)

	local tag = npc:FindFirstChild("TAG")
	if not tag then
		tag = Instance.new("BillboardGui", npc)
		tag.Size = UDim2.new(0, 10, 0, 10)
		tag.AlwaysOnTop = true
		tag.Name = "TAG"
		tag.Enabled = false
		table.insert(Tags, tag)
		
		tag.AncestryChanged:Connect(function(_, parent)
			if parent then return end

			table.remove(Tags, table.find(Tags, tag))
		end)
		
		for _, effect in pairs (Enchantments) do
			local particles = npc:FindFirstChild(effect)
			if not particles then continue end
			
			particles:GetPropertyChangedSignal("Enabled"):Connect(function()
				TagMob(npc)
			end)
		end
	end

	local label = tag:FindFirstChild("LABEL")
	if not label then
		label = Instance.new("TextLabel", tag)
		label.Name = "LABEL"
		label.BackgroundTransparency = 1
		label.Size = UDim2.new(1,0,1,0)
		label.Text = npc.Name
		label.TextSize = 6
		label.TextColor3 = Color3.new(1,1,1)

		task.spawn(function()
			while npc.Parent and label.Parent do
				RunService.Stepped:Wait()

				if Me.Character then
					label.Text = npc.Name .. " " .. math.floor(Me:DistanceFromCharacter(npc.Position))
				end
			end
		end)
	end
	
	tag.Enabled = Settings.TrackMobs and (whitelisted or special)
	label.TextColor3 = special and special.Color.Keypoints[1].Value or Color3.new(1, 1, 1)

	return tag
end

local function OnCharacter(character)
	local root = character:WaitForChild("HumanoidRootPart")

	root.ChildAdded:Connect(function(child)
		if not Settings.DisableKnockback then return end

		if child.ClassName == "BodyVelocity" then
			child.MaxForce = Vector3.new(0, 0, 0)
		end
	end)
end

local function FastTravel(destination)
	local character = Me.Character
	local root = character:WaitForChild("HumanoidRootPart")

	local attachment = Instance.new("Part", Camera)
	attachment.Name = "MOVER"
	attachment.Size = Vector3.new(0.2, 0.2, 0.2)
	attachment.CanCollide = false
	attachment.CFrame = root.CFrame
	attachment.Transparency = 1

	local weld = Instance.new("Weld", attachment)
	weld.Part0 = attachment
	weld.Part1 = root
	weld.Enabled = true

	local bodyVelocity = Instance.new("BodyVelocity")
	bodyVelocity.Name = "BVEL"
	bodyVelocity.Velocity = Vector3.new(0, 0, 0)
	bodyVelocity.MaxForce = Vector3.new(1000000000, 1000000000, 1000000000)
	bodyVelocity.Parent = attachment

	local collisionSignal = RunService.Stepped:Connect(function()
		for _, part in pairs (character:GetChildren()) do
			if part:IsA("BasePart") then part.CanCollide = false end
		end
	end)

	while character.Parent and attachment.Parent and IsTraveling do
		RunService.Stepped:Wait()

		bodyVelocity.Velocity = (root.Position - destination.Position).Unit * -50
		local distance = Me:DistanceFromCharacter(destination.Position)
		if distance <= 2 then break end
	end
	
	if attachment.Parent then
		attachment:Destroy()
	end
	collisionSignal:Disconnect()
end

function Terminal:OnClose()
	Settings.TrackMobs = false
	Settings.DisableKnockback = false
	IsTraveling = false

	for _, connection in pairs (Connections) do
		connection:Disconnect()
	end
	table.clear(Connections)

	for _, tag in pairs (Tags) do
		tag:Destroy()
	end
	table.clear(Tags)
end

Terminal:CreateTextLabel(nil, {Text = "Voxlblade Assist"})

Terminal:CreateLine()

Terminal:CreateTextLabel(nil, {Text = "TRACKER"})

Terminal:CreateRow(nil, {
	Layout = {0.5, 0.5},
	Size = UDim2.new(1, 0, 0, 20),
	Items = {
		Terminal:CreateTextLabel(nil, {
			Text = "Track mobs"
		}),
		Terminal:CreateSwitch(nil, {
			Height = 16,
			Style = SwitchStyle,
			State = Settings.TrackMobs,
			AnchorPoint = Vector2.new(0.5, 0.5),
			Position = UDim2.new(0.5, 0, 0.5, 0),
			OnChanged = function(self, state)
				Settings.TrackMobs = state

				for _, child in pairs (workspace:WaitForChild("NPCS"):GetChildren()) do
					TagMob(child)
				end
			end,
		})
	}
})

Terminal:CreateDropdown(nil, {
	Items = GetAllEnemies(),
	Selected = Settings.Whitelist,
	MultiSelect = true,
	CloseOnSelect = false,
	MaxDisplay = 300,
	Title = #Settings.Whitelist == 0 and "Filter" or table.concat(Settings.Whitelist, ", "),
	OnSelected = function(self, value)
		self.Title = #self.Selected == 0 and "Filter" or table.concat(self.Selected, ", ")

		for _, child in pairs (workspace:WaitForChild("NPCS"):GetChildren()) do
			TagMob(child)
		end
	end,
})



Terminal:CreateDropdown(nil, {
	Items = Enchantments,
	Selected = Settings.Enchantments,
	Padding = 2,
	MaxDisplay = 1000,
	CloseOnSelect = false,
	MultiSelect = true,
	Title = "Enchantments to include",
	OnSelected = function(self, item)

	end,

	ItemBuilder = function(dropdown, item)
		return Terminal:CreateRow(nil, {
			Size = UDim2.new(1, 0, 0, 20),
			Items = {
				Terminal:CreateTextLabel(nil, {
					Text = item,
					AnchorPoint = Vector2.new(0.5, 0.5),
					Position = UDim2.new(0.5, 0, 0.5, 0),
				}),
				Terminal:CreateSwitch(nil, {
					Style = SwitchStyle,
					State = dropdown:IsSelected(item),
					AnchorPoint = Vector2.new(0.5, 0.5),
					Position = UDim2.new(0.5, 0, 0.5, 0),
					Height = 16,
					OnChanged = function(switch, state)
						dropdown:Select(item)
						switch.State = dropdown:IsSelected(item)
						switch:SetState()
						
						for _, child in pairs (workspace:WaitForChild("NPCS"):GetChildren()) do
							TagMob(child)
						end
					end,
				})
			}
		})
	end,
})

Terminal:CreateLine()

Terminal:CreateTextLabel(nil, {Text = "COMBAT"})

Terminal:CreateRow(nil, {
	Layout = {0.5, 0.5},
	Size = UDim2.new(1, 0, 0, 20),
	Items = {
		Terminal:CreateTextLabel(nil, {
			Text = "Disable Knockback"
		}),
		Terminal:CreateSwitch(nil, {
			Height = 16,
			Style = SwitchStyle,
			State = Settings.DisableKnockback,
			AnchorPoint = Vector2.new(0.5, 0.5),
			Position = UDim2.new(0.5, 0, 0.5, 0),
			OnChanged = function(self, state)
				Settings.DisableKnockback = state
			end
		})
	}
})

Terminal:CreateLine()

Terminal:CreateTextLabel(nil, {Text = "FAST TRAVEL"})

Terminal:CreateDropdown(nil, {
	Items = GetAllTravelDestinations(),
	Selected = TravelDestination,
	Padding = 2,
	MaxDisplay = 1000,
	CloseOnSelect = true,
	MultiSelect = false,
	Title = TravelDestination or "Travel destination",
	OnSelected = function(self, item)
		TravelDestination = self.Selected
		self.Title = self.Selected and self.Selected.Name or "Travel destination"
	end,
	
	ItemBuilder = function(dropdown, item)
		return Terminal:CreateTextButton(nil, {
			Text = item.Name,
			Selectable = false,
			Size = UDim2.new(1, 0, 0, 20),
			OnActivated = function(self)
				dropdown:Select(item)
			end,
		})
	end,
})

Terminal:CreateTextButton(nil, {
	Text = IsTraveling and "Stop traveling" or "Start traveling",
	Selectable = true,
	OnSelected = function(self, state)
		if state and (not Me.Character or not TravelDestination or IsTraveling) then
			self.State = false
			self:SetState()
			
			Terminal:CreateNotice({
				Title = "Error",
				Body = "No destination set",
				Dismissable = true
			})
			return
		end

		IsTraveling = state
		self.Text = state and "Stop traveling" or "Start traveling"

		if state then
			local bool, arg = pcall(function()
				FastTravel(TravelDestination)
			end)
			if not bool then warn(arg) end

			IsTraveling = false
		end
	end,
})

if not RunService:IsStudio() then
	table.insert(Connections, workspace:WaitForChild("NPCS").ChildAdded:Connect(function(npc)
		wait(1)

		TagMob(npc)
	end))

	table.insert(Connections, Me.CharacterAdded:Connect(function(character)
		OnCharacter(character)
	end))

	if Me.Character then
		OnCharacter(Me.Character)
	end
end

if Settings.TrackMobs then
	for _, child in pairs (workspace:WaitForChild("NPCS"):GetChildren()) do
		TagMob(child)
	end
end
