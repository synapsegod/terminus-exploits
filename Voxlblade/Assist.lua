local RunService = game:GetService("RunService")
local PlayerService = game:GetService("Players")
local Me = PlayerService.LocalPlayer
local Camera = workspace.CurrentCamera

local Terminus = shared.Terminus or loadstring(game:HttpGet("https://raw.githubusercontent.com/synapsegod/terminus/main/main.lua"))()
local Terminal = Terminus:new("VoxlbladeAssist")

local Scroll = Instance.new("ScrollingFrame")
Scroll.BackgroundTransparency = 1
Scroll.Size = UDim2.new(1, 0, 1, 0)
Scroll.CanvasSize = UDim2.new(0, 0, 0, 0)
Scroll.ScrollBarThickness = 4
Scroll.Parent = Terminal.Window

local Sorter = Instance.new("UIListLayout", Scroll)
Sorter.SortOrder = Enum.SortOrder.LayoutOrder
Sorter.FillDirection = Enum.FillDirection.Vertical
Sorter.HorizontalAlignment = Enum.HorizontalAlignment.Center
Sorter.VerticalAlignment = Enum.VerticalAlignment.Top
Sorter.Padding = UDim.new(0, 5)

--Static
local Effects = {"MagicalL", "LegendaryL", "CorruptL", "BloodyL"}

--Tracking
local TrackList = {}
local IsTracking = false
local TrackSpecials = true
--Combat
local DisableKnockback = false
--Travel
local IsTraveling = false
local TravelDestination = nil

local Connections = {}
local Tags = {}

local function GetAllEnemies()
	local interactables = workspace:WaitForChild("Interactables")
	local enemies = {}

	for _, npc in pairs (game.ReplicatedStorage:WaitForChild("NPCs"):GetChildren()) do
		if interactables:FindFirstChild(npc.Name) then continue end

		table.insert(enemies, npc.Name)
	end

	return enemies
end

local function GetAllTravelDestinations()
	local destinations = {}
	for _, shrine in pairs (workspace:WaitForChild("Shrines"):GetChildren()) do
		table.insert(destinations, {Position = shrine.PrimaryPart.Position + Vector3.new(0, 10, 0), Name = shrine.Name})
	end

	for _, infuser in pairs (workspace:WaitForChild("Infusers"):GetChildren()) do
		table.insert(destinations, {Position = infuser.Enabled.Position + Vector3.new(0, 10, 0), Name = infuser.Name .. " infuser "})
	end

	for _, dungeon in pairs (workspace:WaitForChild("Others"):GetChildren()) do
		if not dungeon:IsA("BasePart") then continue end
		table.insert(destinations, {Position = dungeon.Position, Name = dungeon.Name})
	end

	for _, original in pairs (game.ReplicatedStorage:WaitForChild("NPCs"):GetChildren()) do
		local npc = workspace.Interactables:FindFirstChild(original.Name)
		if not npc then continue end

		local nametag = original:FindFirstChild("TextLabel", true)
		if not nametag then continue end
		if not string.find(nametag.Text, "Innkeeper") then continue end

		table.insert(destinations, {position = npc.Position, Name = nametag.Text})
	end

	local snail = workspace:WaitForChild("Map"):WaitForChild("Stand")
	table.insert(destinations, {Position = snail.PrimaryPart.Position, Name = "Snail Trader"})

	return destinations
end

local function GetSpecial(npc)
	for _, name in pairs (Effects) do
		local effect = npc:FindFirstChild(name)
		if effect and effect.Enabled then
			return effect
		end
	end

	return nil
end

local function IsWhitelisted(npc)
	for _, name in pairs (TrackList) do
		if string.find(string.lower(npc.Name), string.lower(name)) then
			return true
		end
	end

	return false
end

local function Tag(npc)
	local whitelisted = IsWhitelisted(npc)
	local special = GetSpecial(npc)

	local tag = npc:FindFirstChild("TAG")
	if not tag then
		tag = Instance.new("BillboardGui", npc)
		tag.Size = UDim2.new(0, 10, 0, 10)
		tag.AlwaysOnTop = true
		tag.Name = "TAG"
		tag.Enabled = false
		table.insert(Tags, tag)
		tag.AncestryChanged:Connect(function(_, parent)
			if parent then return end

			table.remove(Tags, table.find(Tags, tag))
		end)
		
		for _, effect in pairs (Effects) do
			local light = npc:FindFirstChild(effect)
			if not light then continue end
			
			light:GetPropertyChangedSignal("Enabled"):Connect(function()
				Tag(npc)
			end)
		end
	end

	local label = tag:FindFirstChild("LABEL")
	if not label then
		label = Instance.new("TextLabel", tag)
		label.Name = "LABEL"
		label.BackgroundTransparency = 1
		label.Size = UDim2.new(1,0,1,0)
		label.Text = npc.Name
		label.TextSize = 6
		label.TextColor3 = Color3.new(1,1,1)

		task.spawn(function()
			while npc.Parent and label.Parent do
				RunService.Stepped:Wait()

				if Me.Character then
					label.Text = npc.Name .. " " .. math.floor(Me:DistanceFromCharacter(npc.Position))
				end
			end
		end)
	end

	if not IsTracking then tag.Enabled = false return end

	if whitelisted(npc) or (TrackSpecials and special) then
		tag.Enabled = true
		label.TextColor3 = special and special.Color or Color3.new(1, 1, 1)
	else
		tag.Enabled = false
	end

	return tag
end

local function onCharacter(character)
	local root = character:WaitForChild("HumanoidRootPart")

	root.ChildAdded:Connect(function(child)
		if not DisableKnockback then return end

		if child.ClassName == "BodyVelocity" then
			child.MaxForce = Vector3.new(0, 0, 0)
		end
	end)
end

local function FastTravel(destination)
	local character = Me.Character
	local root = character:WaitForChild("HumanoidRootPart")

	local attachment = Instance.new("Part", Camera)
	attachment.Name = "MOVER"
	attachment.Size = Vector3.new(0.2, 0.2, 0.2)
	attachment.CanCollide = false
	attachment.CFrame = root.CFrame
	attachment.Transparency = 1

	local weld = Instance.new("Weld", attachment)
	weld.Part0 = attachment
	weld.Part1 = root
	weld.Enabled = true

	local bodyVelocity = Instance.new("BodyVelocity")
	bodyVelocity.Name = "BVEL"
	bodyVelocity.Velocity = Vector3.new(0, 0, 0)
	bodyVelocity.MaxForce = Vector3.new(1000000000, 1000000000, 1000000000)
	bodyVelocity.Parent = attachment

	local collisionSignal = RunService.Stepped:Connect(function()
		for _, part in pairs (character:GetChildren()) do
			if part:IsA("BasePart") then part.CanCollide = false end
		end
	end)

	while character.Parent and attachment.Parent and IsTraveling do
		RunService.Stepped:Wait()

		bodyVelocity.Velocity = (root.Position - destination.Position).Unit * -40
		local distance = Me:DistanceFromCharacter(destination.Position)
		if distance <= 5 then break end
	end

	IsTraveling = false
	if attachment.Parent then
		attachment:Destroy()
	end
	collisionSignal:Disconnect()
end

function Terminal:OnClose()
	IsTracking = false
	DisableKnockback = false
	IsTraveling = false

	for _, connection in pairs (Connections) do
		connection:Disconnect()
	end
	table.clear(Connections)

	for _, tag in pairs (Tags) do
		tag:Destroy()
	end
	table.clear(Tags)
end

Terminal:CreateTextLabel(Scroll, {Text = "Voxlblade Assist"})

Terminal:CreateLine(Scroll, {
	Size = UDim2.new(1, -10, 0, 1)
})

Terminal:CreateTextLabel(Scroll, {Text = "TRACKER"})

Terminal:CreateDropdown(Scroll, {
	Items = GetAllEnemies(),
	Selected = TrackList,
	MultiSelect = true,
	CloseOnSelect = false,
	MaxDisplay = 10 * 20,
	Title = #TrackList == 0 and "Filter" or table.concat(TrackList, ", "),
	OnSelected = function(self, value)
		self.Title = #self.Selected == 0 and "Filter" or table.concat(self.Selected, ", ")

		for _, child in pairs (workspace:WaitForChild("NPCS"):GetChildren()) do
			Tag(child)
		end
	end,
	OnToggleDone = function(self, value)
		Scroll.CanvasSize = UDim2.new(0, Sorter.AbsoluteContentSize.X, 0, Sorter.AbsoluteContentSize.Y)
	end,
})

Terminal:CreateRow(Scroll, {
	Layout = {0.5, 0.5},
	Size = UDim2.new(1, 0, 0, 20),
	Items = {
		Terminal:CreateTextLabel(Scroll, {
			Text = "Track mobs"
		}),
		Terminal:CreateSwitch(Scroll, {
			State = IsTracking,
			AnchorPoint = Vector2.new(0.5, 0.5),
			Position = UDim2.new(0.5, 0, 0.5, 0),
			OnChanged = function(self, state)
				IsTracking = state

				for _, child in pairs (workspace:WaitForChild("NPCS"):GetChildren()) do
					Tag(child)
				end
			end,
		})
	}
})

Terminal:CreateRow(Scroll, {
	Layout = {0.5, 0.5},
	Size = UDim2.new(1, 0, 0, 20),
	Items = {
		Terminal:CreateTextLabel(Scroll, {
			Text = "Track special mobs"
		}),
		Terminal:CreateSwitch(Scroll, {
			State = TrackSpecials,
			AnchorPoint = Vector2.new(0.5, 0.5),
			Position = UDim2.new(0.5, 0, 0.5, 0),
			OnChanged = function(self, state)
				TrackSpecials = state

				for _, child in pairs (workspace:WaitForChild("NPCS"):GetChildren()) do
					Tag(child)
				end
			end,
		})
	}
})

Terminal:CreateLine(Scroll, {
	Size = UDim2.new(1, -10, 0, 1)
})

Terminal:CreateTextLabel(Scroll, {Text = "COMBAT"})

Terminal:CreateRow(Scroll, {
	Layout = {0.5, 0.5},
	Size = UDim2.new(1, 0, 0, 20),
	Items = {
		Terminal:CreateTextLabel(Scroll, {
			Text = "Disable Knockback"
		}),
		Terminal:CreateSwitch(Scroll, {
			State = DisableKnockback,
			AnchorPoint = Vector2.new(0.5, 0.5),
			Position = UDim2.new(0.5, 0, 0.5, 0),
			OnChanged = function(self, state)
				DisableKnockback = state
			end
		})
	}
})

Terminal:CreateLine(Scroll, {
	Size = UDim2.new(1, -10, 0, 1)
})

Terminal:CreateTextLabel(Scroll, {Text = "FAST TRAVEL"})

local DestinationDropdown = nil
DestinationDropdown = Terminal:CreateDropdown(Scroll, {
	Items = Terminus.List:new(
		GetAllTravelDestinations()
	):Convert(function(i, destination)
		return Terminal:CreateTextButton(Scroll, {
			Selectable = false,
			Text = destination.Name,
			Size = UDim2.new(1, -4, 0, 20),
			OnActivated = function(self)
				if destination == TravelDestination then return false end
				TravelDestination = destination
				DestinationDropdown:Select(destination)
			end,
		})
	end):Export(),
	MultiSelect = false,
	CloseOnSelect = true,
	MaxDisplay = 10 * 20,
	Title = "Select a destination",
	OnToggleDone = function(self)
		Scroll.CanvasSize = UDim2.new(0, Sorter.AbsoluteContentSize.X, 0, Sorter.AbsoluteContentSize.Y)
	end,
	OnSelected = function(self, value)
		self.Title = value and value.Name or "Select a destination"
	end,
})

Terminal:CreateTextButton(Scroll, {
	Text = IsTraveling and "Stop traveling" or "Start traveling",
	Selectable = true,
	OnSelected = function(self, state)
		if state and (not Me.Character or not TravelDestination or IsTraveling) then
			self:OnSelected(not state)
			return
		end

		IsTraveling = state
		self.Text = state and "Stop traveling" or "Start traveling"

		if state then
			local bool, arg = pcall(function()
				FastTravel(TravelDestination)
			end)
			if not bool then warn(arg) end

			IsTraveling = false
		end
	end,
})

Scroll.CanvasSize = UDim2.new(0, Sorter.AbsoluteContentSize.X, 0, Sorter.AbsoluteContentSize.Y)

table.insert(Connections, workspace:WaitForChild("NPCS").ChildAdded:Connect(function(npc)
	wait(1)

	Tag(npc)
end))

table.insert(Connections, Me.CharacterAdded:Connect(function(character)
	onCharacter(character)
end))

if IsTracking then
	for _, child in pairs (workspace:WaitForChild("NPCS"):GetChildren()) do
		Tag(child)
	end
end

